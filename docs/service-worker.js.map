{"mappings":"YAAAA,QAAQC,IAAI,4BAIZ,MAAMC,EAAY,aAQZC,EAPgB,CACpB,KACA,WACA,gBACA,eACA,eAMFC,KAAKC,iBAAiB,WAAYC,IACjCN,QAAQC,IAAI,+BACZK,EAAEC,UAAU,WACX,MAAMC,QAAcC,OAAOC,KAAKR,GAChCF,QAAQC,IAAI,0CACNO,EAAMG,OAAOR,EACnB,EAJW,GAIP,IAKNC,KAAKC,iBAAiB,YAAaC,IAClCN,QAAQC,IAAI,+BAEZK,EAAEC,UAAUE,OAAOG,OAAOC,MAAMC,GACxBC,QAAQC,IAAIF,EAAQG,KAAKC,IAC/B,GAAIA,IAAQhB,EACZ,OAAOO,OAAOU,OAAOD,EAAI,OAExB,IAMJd,KAAKC,iBAAiB,SAAUC,IAC/BN,QAAQC,IAAI,6BAEZK,EAAEc,YAAY,WAGb,MAAMC,QAAUZ,OAAOa,MAAMhB,EAAEiB,SAG/B,GAFAvB,QAAQC,IAAI,uCAAuCK,EAAEiB,QAAQC,OAEzDH,EAAK,OAAOA,EAGhB,MAAMI,QAAiBC,MAAMpB,EAAEiB,SAEzBf,QAAcC,OAAOC,KAAKR,GAIhC,OAHAF,QAAQC,IAAI,0CAA0CK,EAAEiB,QAAQC,OAChEhB,EAAMmB,IAAIrB,EAAEiB,QAASE,EAASG,SAEvBH,CACP,EAhBa,GAgBT,G","sources":["src/service-worker.js"],"sourcesContent":["console.log('[Service Worker] Running');\r\n\r\n// Create a list of all the files to be cached\r\n\r\nconst cacheName = 'PWA-v0-0-2';\r\nconst appShellFiles = [\r\n  './',\r\n  './app.js',\r\n  './favicon.ico',\r\n  './index.html',\r\n  './style.css',\r\n];\r\nconst contentToCache = appShellFiles;\r\n\r\n// Install the service worker\r\n\r\nself.addEventListener('install', (e) => {\r\n\tconsole.log('[Service Worker] Installing');\r\n\te.waitUntil((async () => {\r\n\t\tconst cache = await caches.open(cacheName);\r\n\t\tconsole.log('[Service Worker] Caching content');\r\n\t\tawait cache.addAll(contentToCache);\r\n\t})());\r\n});\r\n\r\n// Activate cache clean up\r\n\r\nself.addEventListener('activate', (e) => {\r\n\tconsole.log('[Service Worker] Activating');\r\n\t// Delete any files that are no longer necessary and clean up after the app in general\r\n\te.waitUntil(caches.keys().then((keyList) => {\r\n\t\treturn Promise.all(keyList.map((key) => {\r\n\t\t\tif (key === cacheName) { return; }\r\n\t\t\treturn caches.delete(key);\r\n\t\t}))\r\n\t}));\r\n});\r\n\r\n\r\n// Fetch any HTTP request\r\n\r\nself.addEventListener('fetch', (e) => {\r\n\tconsole.log('[Service Worker] Fetching');\r\n\t// This intercepts any HTTP request returning whatever we want! \r\n\te.respondWith((async () => {\r\n\t\t// Fetch content from the cache\r\n\t\t// If content is there, offline functionality can be provided\r\n\t\tconst r = await caches.match(e.request);\r\n\t\tconsole.log(`[Service Worker] Fetching resource: ${e.request.url}`);\r\n\t\t// If content was cached, return it (no version control)\r\n\t\tif (r) { return r; } \r\n\t\t// If content was not cach...\r\n\t\t// fetch it from the network\r\n\t\tconst response = await fetch(e.request); \r\n\t\t// cache it\r\n\t\tconst cache = await caches.open(cacheName);\r\n\t\tconsole.log(`[Service Worker] Caching new resource: ${e.request.url}`);\r\n\t\tcache.put(e.request, response.clone());\r\n\t\t// return it\r\n\t\treturn response;\r\n\t})());\r\n});"],"names":["console","log","$b116141ac698f90d$var$cacheName","$b116141ac698f90d$var$contentToCache","self","addEventListener","e","waitUntil","cache","caches","open","addAll","keys","then","keyList","Promise","all","map","key","delete","respondWith","r","match","request","url","response","fetch","put","clone"],"version":3,"file":"service-worker.js.map"}