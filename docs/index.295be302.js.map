{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-d8397d39eef55cff.js","src/app.js","node_modules/@parcel/runtime-js/lib/runtime-164b6278160e3f54.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"e5iw0\\\":\\\"index.295be302.js\\\",\\\"8PNQt\\\":\\\"service-worker.js\\\"}\"));","// Register a service worker\r\nconsole.log('[App] Register a Service worker.')\r\nif ('serviceWorker' in navigator) {\r\n\tnavigator.serviceWorker.register(\r\n\t\tnew URL('service-worker.js', import.meta.url),\r\n  \t\t{type: 'module'}\r\n  \t);\r\n\r\n\tconsole.log('[App] Succesfully registered a service worker.')\r\n} else {\r\n\tconsole.error('[App] The app will not work offline: the browser does not support Service workers.')\r\n}\r\n\r\n\r\nwindow.addEventListener('DOMContentLoaded', (event) => {\r\n\tconsole.log('[App] DOM fully loaded and parsed, starting dynamic content.');\r\n\r\n\tconst SCHEMA_VERSION = 1;\r\n\r\n\tconst list = document.querySelector('#list');\r\n\tconst form = document.querySelector('form');\r\n\tconst dateInput = document.querySelector('#datePicker');\r\n\tconst ammountInput = document.querySelector('#ammount');\r\n\tconst commentInput = document.querySelector('#comment');\r\n\tconst imageInput = document.querySelector('#image');\r\n\tconst accountInput = document.querySelector('#account');\r\n\tconst categoryInput = document.querySelector('#category');\r\n\tconst submitBtn = document.querySelector('#submit');\r\n\r\n\t// Create an instance of a db object for us to store the open database in\r\n\tlet db;\r\n\t// Open our database; it is created if it doesn't already exist\r\n\t// (see the upgradeneeded handler below)\r\n\tconst openRequest = window.indexedDB.open('expenses_db', SCHEMA_VERSION);\r\n\r\n\t// Handle errors\r\n\t// `error` handle signifies that the database didn't open successfully\r\n\topenRequest.addEventListener('error', () => {\r\n\t\tconsole.error('Database failed to open');\r\n\t\talert(\"Database could not open for some reason!\");\r\n\t});\r\n\r\n\t// `success` handler signifies that the database opened successfully\r\n\topenRequest.addEventListener('success', () => {\r\n\t\tconsole.log('[App] Database opened successfully.');\r\n\r\n\t\t// Store the opened database object in the db variable. This is used a lot below\r\n\t\tdb = openRequest.result;\r\n\r\n\t\t// Run the displayData() function to display the notes already in the IDB\r\n\t\tdisplayData();\r\n\t});\r\n\r\n\t// `upgradeneeded` handler signifies that the requested database does not exists yet\r\n\t// Set up the database tables if this has not already been done\r\n\topenRequest.addEventListener('upgradeneeded', (e) => {\r\n\t\t// Grab a reference to the opened database\r\n\t\tdb = e.target.result;\r\n\r\n\t\t// Create an objectStore to store our notes in (basically like a single table)\r\n\t\t// including a auto-incrementing key\r\n\t\tconst objectStore = db.createObjectStore('expenses_object_store', { keyPath: 'id', autoIncrement:true });\r\n\r\n\t\t// Schema definition\r\n\t\t// Define what data items the objectStore will contain\r\n\t\tobjectStore.createIndex('date', 'date', { unique: false });\r\n\t\tobjectStore.createIndex('ammount', 'ammount', { unique: false });\r\n\t\tobjectStore.createIndex('comment', 'comment', { unique: false });\r\n\t\tobjectStore.createIndex('image', 'image', { unique: false });\r\n\t\tobjectStore.createIndex('account', 'account', { unique: false });\r\n\t\tobjectStore.createIndex('category', 'category', { unique: false });\r\n\r\n\t\tconsole.log('[App] Database setup complete.');\r\n\t});\r\n\r\n\t// Add entry\r\n\t// Create a submit event handler so that when the form is submitted the addData() function is run\r\n\tform.addEventListener('submit', addData);\r\n\r\n\tfunction addData(e) {\r\n\t\tconsole.log('[App] Add new entry to the database.');\r\n\t\t// prevent default - we don't want the form to submit in the conventional way\r\n\t\te.preventDefault();\r\n\r\n\t\t// grab the values entered into the form fields and store them in an object ready for being inserted into the DB\r\n\t\tconst newItem = { \r\n\t\t\tdate: dateInput.value, \r\n\t\t\tammount: ammountInput.value,\r\n\t\t\tcomment: commentInput.value,\r\n\t\t\timage: imageInput.value,\r\n\t\t\taccount: accountInput.value,\r\n\t\t\tcategory: categoryInput.value,\r\n\t\t};\r\n\r\n\t\t// open a read/write db transaction, ready for adding the data\r\n\t\tconst transaction = db.transaction(['expenses_object_store'], 'readwrite');\r\n\r\n\t\t// call an object store that's already been added to the database\r\n\t\tconst objectStore = transaction.objectStore('expenses_object_store');\r\n\r\n\t\t// Make a request to add our newItem object to the object store\r\n\t\tconst addRequest = objectStore.add(newItem);\r\n\r\n\t\taddRequest.addEventListener('success', () => {\r\n\t\t\t// Clear the form, ready for adding the next entry\r\n\t\t\tconst reset_button = document.getElementById('reset');\r\n\t\t\treset_button.click();\r\n\t\t});\r\n\r\n\t\t// Report on the success of the transaction completing, when everything is done\r\n\t\ttransaction.addEventListener('complete', () => {\r\n\t\t\tconsole.log('[App] Added new entry to database.');\r\n\t\t\t// update the display of data to show the newly added item, by running displayData() again.\r\n\t\t\tdisplayData();\r\n\t\t});\r\n\r\n\t\ttransaction.addEventListener('error', () => console.log('Transaction not opened due to error.'));\r\n\t}\r\n\r\n\t// Display data in database\r\n\tfunction displayData() {\r\n\t\tconsole.log('[App] Display data in the database.');\r\n\t\t// Empty the contents of the list element\r\n\t\t// If you didn't do this, you'd get duplicates listed each time a new note is added\r\n\t\twhile (list.firstChild) {\r\n\t\t\tlist.removeChild(list.firstChild);\r\n\t\t}\r\n\r\n\t\t// Open our object store and then get a cursor - which iterates through all the\r\n\t\t// different data items in the store\r\n\t\tconst objectStore = db.transaction('expenses_object_store').objectStore('expenses_object_store');\r\n\t\tobjectStore.openCursor().addEventListener('success', (e) => {\r\n\t\t\t// Get a reference to the cursor\r\n\t\t\tconst cursor = e.target.result;\r\n\r\n\t\t\t// If there is still another data item to iterate through, keep running this code\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// grab the values entered into the form fields and store them in an object ready for being inserted into the DB\r\n\t\t\t\tconst entry = { \r\n\t\t\t\t\tdate: cursor.value.date, \r\n\t\t\t\t\tammount: cursor.value.ammount,\r\n\t\t\t\t\tcomment: cursor.value.comment,\r\n\t\t\t\t\timage: cursor.value.image,\r\n\t\t\t\t\taccount: cursor.value.account,\r\n\t\t\t\t\tcategory: cursor.value.category,\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Create a list item, h3, and p to put each data item inside when displaying it\r\n\t\t\t\t// structure the HTML fragment, and append it inside the list\r\n\t\t\t\tconst listItem = document.createElement('li');\r\n\t\t\t\t\r\n\t\t\t\t// Display structure of an entry \r\n\t\t\t\tconst heading = document.createElement('h2');\r\n\t\t\t\tconst money = document.createElement('p');\r\n\t\t\t\tconst details = document.createElement('details');\r\n\t\t\t\tconst summary = document.createElement('summary');\r\n\t\t\t\tconst comment = document.createElement('p');\r\n\t\t\t\tconst image = document.createElement('p');\r\n\t\t\t\tconst account = document.createElement('p');\r\n\t\t\t\tconst category = document.createElement('p');\r\n\t\t\t\t\r\n\r\n\t\t\t\t// Put the data from the cursor inside the h3 and para\r\n\t\t\t\tconst categoryEmoji = document.querySelector(\"option[value=\" + entry.category + \"]\").textContent;\r\n\t\t\t\theading.textContent = entry.date;\r\n\t\t\t\tmoney.textContent = entry.ammount;\r\n\t\t\t\tsummary.textContent = entry.account.toString() + ', ' + categoryEmoji;\r\n\t\t\t\tcomment.textContent = entry.comment;\r\n\t\t\t\timage.textContent = entry.image;\r\n\t\t\t\taccount.textContent = entry.account;\r\n\t\t\t\tcategory.textContent = categoryEmoji;\r\n\r\n\t\t\t\tdetails.appendChild(summary);\r\n\t\t\t\tdetails.appendChild(comment);\r\n\t\t\t\tdetails.appendChild(image);\r\n\t\t\t\tdetails.appendChild(account);\r\n\t\t\t\tdetails.appendChild(category);\r\n\t\t\t\t\r\n\t\t\t\tlistItem.appendChild(heading);\r\n\t\t\t\tlistItem.appendChild(money);\r\n\t\t\t\tlistItem.appendChild(details);\r\n\t\t\t\t\r\n\t\t\t\tlist.appendChild(listItem);\r\n\r\n\t\t\t\t// Store the ID of the data item inside an attribute on the listItem, so we know\r\n\t\t\t\t// which item it corresponds to. This will be useful later when we want to delete items\r\n\t\t\t\tlistItem.setAttribute('data-entry-id', cursor.value.id);\r\n\r\n\t\t\t\t// Create a button and place it inside each listItem\r\n\t\t\t\tconst deleteBtn = document.createElement('button');\r\n\t\t\t\tlistItem.appendChild(deleteBtn);\r\n\t\t\t\tdeleteBtn.textContent = 'Delete';\r\n\t\t\t\tdeleteBtn.setAttribute('class', 'delete');\r\n\r\n\t\t\t\t// Create a button and place it inside each listItem\r\n\t\t\t\tconst editBtn = document.createElement('button');\r\n\t\t\t\tlistItem.appendChild(editBtn);\r\n\t\t\t\teditBtn.textContent = 'Edit';\r\n\r\n\t\t\t\t// Set an event handler so that when the button is clicked, the deleteItem()\r\n\t\t\t\t// function is run\r\n\t\t\t\tdeleteBtn.addEventListener('click', deleteEntry);\r\n\t\t\t\teditBtn.addEventListener('click', editEntry);\r\n\r\n\t\t\t\t// Iterate to the next item in the cursor\r\n\t\t\t\tcursor.continue();\r\n\t\t\t} else {\r\n\t\t\t\t// Again, if list item is empty, display a 'No notes stored' message\r\n\t\t\t\tif (!list.firstChild) {\r\n\t\t\t\t\tconst listItem = document.createElement('li');\r\n\t\t\t\t\tlistItem.textContent = 'No entries stored.'\r\n\t\t\t\t\tlist.appendChild(listItem);\r\n\t\t\t\t}\r\n\t\t\t\t// if there are no more cursor items to iterate through, say so\r\n\t\t\t\tconsole.log('[App] All notes displayed.');\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// Delete entry\r\n\tfunction deleteEntry(e) {\r\n\t\t// Retrieve the name of the task we want to delete. We need\r\n\t\t// to convert it to a number before trying to use it with IDB; IDB key\r\n\t\t// values are type-sensitive.\r\n\t\tconst entryId = Number(e.target.parentNode.getAttribute('data-entry-id'));\r\n\r\n\t\tconsole.log(`[App] Delete entry ${entryId}.`);\r\n\r\n\t\t// open a database transaction and delete the task, finding it using the id we retrieved above\r\n\t\tconst transaction = db.transaction(['expenses_object_store'], 'readwrite');\r\n\t\tconst objectStore = transaction.objectStore('expenses_object_store');\r\n\t\tconst deleteRequest = objectStore.delete(entryId);\r\n\r\n\t\t// report that the data item has been deleted\r\n\t\ttransaction.addEventListener('complete', () => {\r\n\t\t\t// delete the parent of the button\r\n\t\t\t// which is the list item, so it is no longer displayed\r\n\t\t\tif (e.target.parentNode.parentNode) {\r\n\t\t\t\te.target.parentNode.parentNode.removeChild(e.target.parentNode);\r\n\t\t\t\tconsole.log(`[App] Entry ${entryId} deleted.`);\r\n\t\t\t}\r\n\r\n\t\t\t// Again, if list item is empty, display a 'No notes stored' message\r\n\t\t\tif (!list.firstChild) {\r\n\t\t\t\tconst listItem = document.createElement('li');\r\n\t\t\t\tlistItem.textContent = 'No entries stored.'\r\n\t\t\t\tlist.appendChild(listItem);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// Delete entry\r\n\tfunction editEntry(e) {\r\n\t\talert(\"WIP\")\r\n\t}\r\n\t/////////////////////////////////////////////\r\n\t// Actionable buttons\r\n\t/////////////////////////////////////////////\r\n\r\n\t// Set date automatically\r\n\tfunction getDate() {\r\n\t\tconsole.log('[App] Set today.');\r\n\t    const today = new Date();\r\n\t\tdocument.getElementById(\"datePicker\").value= today.getFullYear() + '-' + ('0' + (today.getMonth() + 1)).slice(-2) + '-' + ('0' + today.getDate()).slice(-2);\r\n\t\tconsole.log('[App] Setted today.');\r\n\t}\r\n\tgetDate();\r\n\t\r\n\t// Reset button\r\n\tconst reset_button = document.getElementById('reset');\r\n\treset_button.addEventListener('click', (event) => {\r\n\t\tconsole.log('[App] Reset form.');\r\n\t\tgetDate();\r\n\t\tdocument.getElementById(\"ammount\").value = 0.00;\r\n\t\tdocument.getElementById(\"comment\").value = \"\";\r\n\t\tdocument.getElementById(\"image\").value = \"\";\r\n\t\tconsole.log('[App] Reseted form.');\r\n\t});\r\n\r\n\t// Download button\r\n\tconst button = document.getElementById('download');\r\n\tbutton.addEventListener('click', (event) => {\r\n\r\n\t\tconsole.log('[App] Download start.');\r\n\t\t// Function to download data to a file\r\n\t\tfunction download(data, filename, type) {\r\n\t\t    var file = new Blob([data], {type: type});\r\n\t\t    var a = document.createElement(\"a\"),\r\n\t\t            url = URL.createObjectURL(file);\r\n\t\t    a.href = url;\r\n\t\t    a.download = filename;\r\n\t\t    document.body.appendChild(a);\r\n\t\t    a.click();\r\n\t\t    setTimeout(function() {\r\n\t\t        document.body.removeChild(a);\r\n\t\t        window.URL.revokeObjectURL(url);  \r\n\t\t    }, 0); \r\n\t\t}\r\n\r\n\t\t// Retrieve content\r\n\t\tvar content = [];\r\n\t\t\t\t\t\r\n\t\t// Open our object store and then get a cursor - which iterates through all the\r\n\t\t// different data items in the store\r\n\t\tconst objectStore2 = db.transaction('expenses_object_store').objectStore('expenses_object_store');\r\n\t\t// Open our object store and then get a cursor - which iterates through all the\r\n\t\t// different data items in the store\r\n\t\tobjectStore2.openCursor().addEventListener('success', (e) => {\r\n\t\t\t// Get a reference to the cursor\r\n\t\t\tconst cursor = e.target.result;\r\n\r\n\t\t\t// If there is still another data item to iterate through, keep running this code\r\n\t\t\tif (cursor) {\r\n\t\t\t\tconst entry = {\r\n\t\t\t\t\tdate: cursor.value.date.toString(), \r\n\t\t\t\t\tammount: cursor.value.ammount.toString(),\r\n\t\t\t\t\tcomment: cursor.value.comment.toString(),\r\n\t\t\t\t\timage: cursor.value.image.toString(),\r\n\t\t\t\t\taccount: cursor.value.account.toString(),\r\n\t\t\t\t\tcategory: cursor.value.category.toString(),\r\n\t\t\t\t};\r\n\t\t\t\tcontent.push(entry);\r\n\t\t\t\t\r\n\r\n\t\t\t\t// Iterate to the next item in the cursor\r\n\t\t\t\tcursor.continue();\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(\"[App] All data was collected.\");\r\n\r\n\t\t\t\t// Define name\r\n\t\t\t\tconst today = new Date();\r\n\t\t\t\tconst filename =  today.getFullYear() + '-' + ('0' + (today.getMonth() + 1)).slice(-2) + '-' + ('0' + today.getDate()).slice(-2) + '-database.json';\r\n\t\t\t\t\r\n\t\t\t\tdownload(JSON.stringify(content), filename, \"application/json\");\r\n\t\t\t\tconsole.log('[App] Downloaded data.');\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t});\r\n\r\n\t// Clear button\r\n\t// Clears the database\r\n\tconst clearButton = document.querySelector('#clear');\r\n\tclearButton.addEventListener('click', (event) => {\r\n\t\tconsole.log('[App] Clear database.');\r\n\t\tconst deleteButtons = document.querySelectorAll('.delete');\r\n\t\tdeleteButtons.forEach((deleteButton) => {\r\n\t\t\tdeleteButton.click();\r\n\t\t});\r\n\t\tconsole.log('[App] Cleared database.');\r\n\t\t// Run the displayData() function to display the notes already in the IDB\r\n\t\tdisplayData();\r\n\t});\r\n});","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"8PNQt\")).toString();"],"names":["$ef7689007096c8a0$export$6503ec6e8aabbaf","$ef7689007096c8a0$export$f7ad0328861e2f03","$ef7689007096c8a0$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","console","log","$5bd52c6418b3a16b$exports","URL","resolve","import","meta","url","toString","navigator","serviceWorker","error","window","addEventListener","event","list","document","querySelector","form","dateInput","ammountInput","commentInput","imageInput","accountInput","categoryInput","db","openRequest","indexedDB","open","displayData","firstChild","removeChild","transaction","objectStore","openCursor","e","cursor","target","result","entry","date","value","ammount","comment","image","account","category","listItem","createElement","heading","money","details","summary","categoryEmoji","textContent","appendChild","setAttribute","deleteBtn","editBtn","deleteEntry","editEntry","continue","listItem1","entryId","Number","parentNode","getAttribute","delete","alert","getDate","today","Date","getElementById","getFullYear","getMonth","slice","createObjectStore","keyPath","autoIncrement","createIndex","unique","preventDefault","newItem","add","click","content","push","filename","data","type","file","Blob","a","createObjectURL","href","download","body","setTimeout","revokeObjectURL","stringify","querySelectorAll","forEach","deleteButton"],"version":3,"file":"index.295be302.js.map"}