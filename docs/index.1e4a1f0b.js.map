{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-d8397d39eef55cff.js","src/app.js","node_modules/@parcel/runtime-js/lib/runtime-164b6278160e3f54.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"e5iw0\\\":\\\"index.1e4a1f0b.js\\\",\\\"8PNQt\\\":\\\"service-worker.js\\\"}\"));","// if ('serviceWorker' in navigator) {\r\n//   caches.keys().then(function(cacheNames) {\r\n//     cacheNames.forEach(function(cacheName) {\r\n//       caches.delete(cacheName);\r\n//     });\r\n//   });\r\n// }\r\n\r\n// Register a service worker\r\nconsole.log('[App] Register a Service worker.')\r\nif ('serviceWorker' in navigator) {\r\n\tnavigator.serviceWorker.register(\r\n\t\tnew URL('service-worker.js', import.meta.url),\r\n  \t\t{type: 'module'}\r\n  \t);\r\n\r\n\tconsole.log('[App] Succesfully registered a service worker.')\r\n} else {\r\n\tconsole.error('[App] The app will not work offline: the browser does not support Service workers.')\r\n}\r\n\r\n\r\nwindow.addEventListener('DOMContentLoaded', (event) => {\r\n\tconsole.log('[App] START Load dynamic content.');\r\n\r\n\t// UI elements\r\n\tconst list = document.querySelector('#list');\r\n\tconst form = document.querySelector('form');\r\n\tconst dateInput = document.querySelector('#datePicker');\r\n\tconst ammountInput = document.querySelector('#ammount');\r\n\tconst commentInput = document.querySelector('#comment');\r\n\tconst imageInput = document.querySelector('#image');\r\n\tconst accountInput = document.querySelector('#account');\r\n\tconst categoryInput = document.querySelector('#category');\r\n\tconst submitBtn = document.querySelector('#submit');\r\n\r\n\t// Hold an instance of a db object for us to store the IndexedDB data in\r\n\tlet db;\r\n\tconst SCHEMA_VERSION = 1;\r\n\r\n\tconsole.log('[App] END Initialize app.');\r\n\r\n\t// Open our database; it is created if it doesn't already exist\r\n\t// (see the upgradeneeded handler below)\r\n\tconst openRequest = window.indexedDB.open('expenses_db', SCHEMA_VERSION);\r\n\r\n\t// Handle errors\r\n\t// `error` handle signifies that the database didn't open successfully\r\n\topenRequest.addEventListener('error', (e) => {\r\n\t\tconsole.error('[App] Database failed to open.');\r\n\t\tconsole.error(e);\r\n\t\talert(\"Database could not open!\");\r\n\t});\r\n\r\n\t// Handle upgrading version\r\n\t// `upgradeneeded` handler signifies that the requested database does not exists yet\r\n\t// Set up the database tables if this has not already been done\r\n\topenRequest.addEventListener('upgradeneeded', (e) => {\r\n\t\t// Grab a reference to the opened database\r\n\t\tdb = e.target.result;\r\n\r\n\t\tdb.onerror = (event) => {\r\n\t\t\tconsole.error('[App] Database failed to upgrade.');\r\n\t\t\tconsole.error(event);\r\n\t\t\talert(\"Database could not upgrade!\");\r\n\t\t};\r\n\r\n\t\t// Create an objectStore to store our notes in (basically like a single table)\r\n\t\t// including a auto-incrementing key\r\n\t\tconst objectStore = db.createObjectStore('expenses_object_store', { keyPath: 'id', autoIncrement:true });\r\n\r\n\t\t// Schema definition\r\n\t\t// Define what data items the objectStore will contain\r\n\t\tobjectStore.createIndex('date', 'date', { unique: false });\r\n\t\tobjectStore.createIndex('ammount', 'ammount', { unique: false });\r\n\t\tobjectStore.createIndex('comment', 'comment', { unique: false });\r\n\t\tobjectStore.createIndex('image', 'image', { unique: false });\r\n\t\tobjectStore.createIndex('account', 'account', { unique: false });\r\n\t\tobjectStore.createIndex('category', 'category', { unique: false });\r\n\r\n\t\tconsole.log('[App] END Create object store.');\r\n\t});\r\n\r\n\t// `success` handler signifies that the database opened successfully\r\n\topenRequest.addEventListener('success', () => {\r\n\t\tconsole.log('[App] END Open database.');\r\n\t\t// Store the opened database object in the db variable. This is used a lot below\r\n\t\tdb = openRequest.result;\r\n\t\tdisplayData();\r\n\t});\r\n\t\r\n\t// Display data in database\r\n\tfunction displayData() {\r\n\t\tconsole.log('[App] START Empty list.');\r\n\t\t// Empty the contents of the list element\r\n\t\t// If you didn't do this, you'd get duplicates listed each time a new note is added\r\n\t\twhile (list.firstChild) {\r\n\t\t\tlist.removeChild(list.firstChild);\r\n\t\t}\r\n\r\n\t\t// open a read/write db transaction, ready for adding the data\r\n\t\tconst transaction = db.transaction('expenses_object_store', 'readonly');\r\n\t\t// call an object store that's already been added to the database\r\n\t\tconst objectStore = transaction.objectStore('expenses_object_store');\r\n\t\tconst request = objectStore.getAll();\r\n\r\n\t\trequest.addEventListener('error', () => {\r\n\t\t\tconsole.error('[App] Database failed to open.');\r\n\t\t\tconsole.error(event);\r\n\t\t\talert(\"Database could not open for some reason!\");\r\n\t\t});\r\n\t\trequest.addEventListener('success', () => {\r\n\t\t\t// store the result of opening the database.\r\n\t\t\tconst data = request.result;\r\n\t\r\n\t\t\tif (!data.length && !list.firstChild) {\r\n\t\t\t\t// Again, if list item is empty, display a 'No notes stored' message\r\n\t\t\t\tconst listItem = document.createElement('li');\r\n\t\t\t\tlistItem.textContent = 'No entries stored.'\r\n\t\t\t\tlist.appendChild(listItem);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Sort the array per date, decreasing\r\n\t\t\tconsole.log(data);\r\n\t\t\tdata.sort(function(entry1, entry2){\r\n\t\t\t\tif (entry1.date > entry2.date) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t} if (entry1.date < entry2.date) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\treturn 0;\r\n\t\t\t});\r\n\t\t\tconsole.log(data);\r\n\r\n\t\t\tfor (let i = 0; i < data.length; i++) {\r\n\t\t\t\tconst entry = data[i];\r\n\t\t\t\tconsole.log(\"[App] START Display entry.\");\r\n\t\t\t\tconsole.log(entry);\r\n\r\n\t\t\t\t// Create a list item, h3, and p to put each data item inside when displaying it\r\n\t\t\t\t// structure the HTML fragment, and append it inside the list\r\n\t\t\t\tconst listItem = document.createElement('li');\r\n\t\t\t\t\r\n\t\t\t\t// Display structure of an entry \r\n\t\t\t\tconst heading = document.createElement('h2');\r\n\t\t\t\tconst money = document.createElement('p');\r\n\t\t\t\tconst details = document.createElement('details');\r\n\t\t\t\tconst summary = document.createElement('summary');\r\n\t\t\t\tconst comment = document.createElement('p');\r\n\t\t\t\tconst image = document.createElement('p');\r\n\t\t\t\tconst account = document.createElement('p');\r\n\t\t\t\tconst category = document.createElement('p');\r\n\t\t\t\t\r\n\r\n\t\t\t\t// Put the data from the cursor inside the h3 and para\r\n\t\t\t\tconst categoryEmoji = document.querySelector(\"option[value=\" + entry.category + \"]\").textContent;\r\n\t\t\t\theading.textContent = entry.date;\r\n\t\t\t\tmoney.textContent = entry.ammount;\r\n\t\t\t\tsummary.textContent = entry.account.toString() + ', ' + categoryEmoji;\r\n\t\t\t\tcomment.textContent = entry.comment;\r\n\t\t\t\timage.textContent = entry.image;\r\n\t\t\t\taccount.textContent = entry.account;\r\n\t\t\t\tcategory.textContent = categoryEmoji;\r\n\r\n\t\t\t\tdetails.appendChild(summary);\r\n\t\t\t\tdetails.appendChild(comment);\r\n\t\t\t\tdetails.appendChild(image);\r\n\t\t\t\tdetails.appendChild(account);\r\n\t\t\t\tdetails.appendChild(category);\r\n\t\t\t\t\r\n\t\t\t\tlistItem.appendChild(heading);\r\n\t\t\t\tlistItem.appendChild(money);\r\n\t\t\t\tlistItem.appendChild(details);\r\n\t\t\t\t\r\n\t\t\t\tlist.appendChild(listItem);\r\n\r\n\t\t\t\t// Store the ID of the data item inside an attribute on the listItem, so we know\r\n\t\t\t\t// which item it corresponds to. This will be useful later when we want to delete items\r\n\t\t\t\tlistItem.setAttribute('data-entry-id', entry.id);\r\n\r\n\t\t\t\t// Create a button and place it inside each listItem\r\n\t\t\t\tconst deleteBtn = document.createElement('button');\r\n\t\t\t\tlistItem.appendChild(deleteBtn);\r\n\t\t\t\tdeleteBtn.textContent = 'Delete';\r\n\t\t\t\tdeleteBtn.setAttribute('class', 'delete');\r\n\t\t\t\t// Set an event handler so that when the button is clicked, the deleteItem()\r\n\t\t\t\t// function is run\r\n\t\t\t\tdeleteBtn.addEventListener('click', deleteEntry);\t\r\n\t\t\t}\r\n\r\n\t\t\tconsole.log('[App] END Display all entries.');\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t// Add entry\r\n\t// Create a submit event handler so that when the form is submitted the addData() function is run\r\n\tform.addEventListener('submit', addData);\r\n\r\n\tfunction addData(e) {\r\n\t\t// prevent default - we don't want the form to submit in the conventional way\r\n\t\te.preventDefault();\r\n\r\n\t\tconsole.log('[App] START Add new entry to the database.');\r\n\r\n\t\t// grab the values entered into the form fields and store them in an object ready for being inserted into the DB\r\n\t\tconst newItem = { \r\n\t\t\tdate: dateInput.value, \r\n\t\t\tammount: ammountInput.value,\r\n\t\t\tcomment: commentInput.value,\r\n\t\t\timage: imageInput.value,\r\n\t\t\taccount: accountInput.value,\r\n\t\t\tcategory: categoryInput.value,\r\n\t\t};\r\n\r\n\t\t// open a read/write db transaction, ready for adding the data\r\n\t\tconst transaction = db.transaction(['expenses_object_store'], 'readwrite');\r\n\r\n\t\t// Report on the success of the transaction completing, when everything is done\r\n\t    transaction.oncomplete = () => {\r\n\t\t\tconsole.log(\"[App] END Add entry.\");\r\n\r\n\t\t\t// Update the display of data to show the newly added item, by running displayData() again.\r\n\t\t\tdisplayData();\r\n\t    };\r\n\r\n\t    // Handler for any unexpected error\r\n\t    transaction.onerror = (e) => {\r\n\t\t\tconsole.error(\"[App] Failed to add an entry!\");\r\n\t\t\tconsole.log(e);\r\n\t    };\r\n\r\n\t\t// call an object store that's already been added to the database\r\n\t\tconst objectStore = transaction.objectStore('expenses_object_store');\r\n\r\n\t\t// Make a request to add our newItem object to the object store\r\n\t\tconst addRequest = objectStore.add(newItem);\r\n\r\n\t\taddRequest.addEventListener('success', () => {\r\n\t\t\tconsole.log(\"[App] END Add new entry.\");\r\n\t\t\t// Clear the form, ready for adding the next entry\r\n\t\t\tconst reset_button = document.querySelector('#reset');\r\n\t\t\treset_button.click();\r\n\t\t});\r\n\t}\r\n\r\n\t\r\n\r\n\t// Delete entry\r\n\tfunction deleteEntry(e) {\r\n\t\t// Retrieve the name of the task we want to delete. We need\r\n\t\t// to convert it to a number before trying to use it with IDB; IDB key\r\n\t\t// values are type-sensitive.\r\n\t\tconst entryId = Number(e.target.parentNode.getAttribute('data-entry-id'));\r\n\r\n\t\tconsole.log(`[App] START Delete entry ${entryId}.`);\r\n\r\n\t\t// open a database transaction and delete the task, finding it using the id we retrieved above\r\n\t\tconst transaction = db.transaction(['expenses_object_store'], 'readwrite');\r\n\t\tconst objectStore = transaction.objectStore('expenses_object_store');\r\n\t\tconst deleteRequest = objectStore.delete(entryId);\r\n\r\n\t\t// report that the data item has been deleted\r\n\t\ttransaction.addEventListener('complete', () => {\r\n\t\t\t// delete the parent of the button\r\n\t\t\t// which is the list item, so it is no longer displayed\r\n\t\t\tif (e.target.parentNode.parentNode) {\r\n\t\t\t\te.target.parentNode.parentNode.removeChild(e.target.parentNode);\r\n\t\t\t\tconsole.log(`[App] Entry ${entryId} deleted.`);\r\n\t\t\t}\r\n\r\n\t\t\t// Display list again\r\n\t\t\tdisplayData();\r\n\t\t});\r\n\r\n\t\t// Handler for any unexpected error\r\n\t    transaction.onerror = (e) => {\r\n\t\t\tconsole.error(\"[App] Failed to delete an entry!\");\r\n\t\t\tconsole.log(e);\r\n\t    };\r\n\t}\r\n\r\n\r\n\t/////////////////////////////////////////////\r\n\t// Actionable buttons\r\n\t/////////////////////////////////////////////\r\n\r\n\t// Set date automatically\r\n\tfunction getDate() {\r\n\t\tconsole.log('[App] Set today.');\r\n\t    const today = new Date();\r\n\t\tdocument.getElementById(\"datePicker\").value= today.getFullYear() + '-' + ('0' + (today.getMonth() + 1)).slice(-2) + '-' + ('0' + today.getDate()).slice(-2);\r\n\t\tconsole.log('[App] Setted today.');\r\n\t}\r\n\tgetDate();\r\n\t\r\n\t// Reset button\r\n\tconst reset_button = document.getElementById('reset');\r\n\treset_button.addEventListener('click', (event) => {\r\n\t\tconsole.log('[App] Reset form.');\r\n\t\tgetDate();\r\n\t\tdocument.getElementById(\"ammount\").value = \"\";\r\n\t\tdocument.getElementById(\"comment\").value = \"\";\r\n\t\tdocument.getElementById(\"image\").value = \"\";\r\n\t\tconsole.log('[App] Reseted form.');\r\n\t});\r\n\r\n\t// Download button\r\n\tconst button = document.getElementById('download');\r\n\tbutton.addEventListener('click', (event) => {\r\n\r\n\t\tconsole.log('[App] Download start.');\r\n\t\t// Function to download data to a file\r\n\t\tfunction download(data, filename, type) {\r\n\t\t    var file = new Blob([data], {type: type});\r\n\t\t    var a = document.createElement(\"a\"),\r\n\t\t            url = URL.createObjectURL(file);\r\n\t\t    a.href = url;\r\n\t\t    a.download = filename;\r\n\t\t    document.body.appendChild(a);\r\n\t\t    a.click();\r\n\t\t    setTimeout(function() {\r\n\t\t        document.body.removeChild(a);\r\n\t\t        window.URL.revokeObjectURL(url);  \r\n\t\t    }, 0); \r\n\t\t}\r\n\r\n\t\t// Retrieve content\r\n\t\tvar content = [];\r\n\t\t\t\t\t\r\n\t\t// Open our object store and then get a cursor - which iterates through all the\r\n\t\t// different data items in the store\r\n\t\tconst objectStore2 = db.transaction('expenses_object_store').objectStore('expenses_object_store');\r\n\t\t// Open our object store and then get a cursor - which iterates through all the\r\n\t\t// different data items in the store\r\n\t\tobjectStore2.openCursor().addEventListener('success', (e) => {\r\n\t\t\t// Get a reference to the cursor\r\n\t\t\tconst cursor = e.target.result;\r\n\r\n\t\t\t// If there is still another data item to iterate through, keep running this code\r\n\t\t\tif (cursor) {\r\n\t\t\t\tconst entry = {\r\n\t\t\t\t\tdate: cursor.value.date.toString(), \r\n\t\t\t\t\tammount: cursor.value.ammount.toString(),\r\n\t\t\t\t\tcomment: cursor.value.comment.toString(),\r\n\t\t\t\t\timage: cursor.value.image.toString(),\r\n\t\t\t\t\taccount: cursor.value.account.toString(),\r\n\t\t\t\t\tcategory: cursor.value.category.toString(),\r\n\t\t\t\t};\r\n\t\t\t\tcontent.push(entry);\r\n\t\t\t\t\r\n\r\n\t\t\t\t// Iterate to the next item in the cursor\r\n\t\t\t\tcursor.continue();\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(\"[App] All data was collected.\");\r\n\r\n\t\t\t\t// Define name\r\n\t\t\t\tconst today = new Date();\r\n\t\t\t\tconst filename =  today.getFullYear() + '-' + ('0' + (today.getMonth() + 1)).slice(-2) + '-' + ('0' + today.getDate()).slice(-2) + '-database.json';\r\n\t\t\t\t\r\n\t\t\t\tdownload(JSON.stringify(content), filename, \"application/json\");\r\n\t\t\t\tconsole.log('[App] Downloaded data.');\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t});\r\n\r\n\t// Clear button\r\n\t// Clears the database\r\n\tconst clearButton = document.querySelector('#clear');\r\n\tclearButton.addEventListener('click', (event) => {\r\n\t\tconsole.log('[App] Clear database.');\r\n\t\tconst deleteButtons = document.querySelectorAll('.delete');\r\n\t\tdeleteButtons.forEach((deleteButton) => {\r\n\t\t\tdeleteButton.click();\r\n\t\t});\r\n\t\tconsole.log('[App] Cleared database.');\r\n\t});\r\n});","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"8PNQt\")).toString();"],"names":["$ef7689007096c8a0$export$6503ec6e8aabbaf","$ef7689007096c8a0$export$f7ad0328861e2f03","$ef7689007096c8a0$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","console","log","$5bd52c6418b3a16b$exports","URL","resolve","import","meta","url","toString","navigator","serviceWorker","error","window","addEventListener","event","list","document","querySelector","form","dateInput","ammountInput","commentInput","imageInput","accountInput","categoryInput","db","openRequest","indexedDB","open","displayData","firstChild","removeChild","request","transaction","objectStore","getAll","alert","data","result","listItem","createElement","textContent","appendChild","sort","entry1","entry2","date","entry","listItem1","heading","money","details","summary","comment","image","account","category","categoryEmoji","ammount","setAttribute","deleteBtn","deleteEntry","e","entryId","Number","target","parentNode","getAttribute","delete","onerror","getDate","today","Date","getElementById","value","getFullYear","getMonth","slice","createObjectStore","keyPath","autoIncrement","createIndex","unique","preventDefault","newItem","oncomplete","add","click","content","openCursor","cursor","push","continue","filename","type","file","Blob","a","createObjectURL","href","download","body","setTimeout","revokeObjectURL","stringify","querySelectorAll","forEach","deleteButton"],"version":3,"file":"index.1e4a1f0b.js.map"}